# Autogenerated from a Treetop grammar. Edits may be lost.


module Musicality
module Parsing

module SlurMark
  include Treetop::Runtime

  def root
    @root ||= :slur_mark
  end

  def _nt_slur_mark
    start_index = index
    if node_cache[:slur_mark].has_key?(index)
      cached = node_cache[:slur_mark][index]
      if cached
        node_cache[:slur_mark][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_begin_slur
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_end_slur
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:slur_mark][start_index] = r0

    r0
  end

  module BeginSlur0
    def to_slur_mark; return Musicality::SlurMarks::BEGIN_SLUR; end
  end

  def _nt_begin_slur
    start_index = index
    if node_cache[:begin_slur].has_key?(index)
      cached = node_cache[:begin_slur][index]
      if cached
        node_cache[:begin_slur][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?("(", false, index))
      r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      r0.extend(BeginSlur0)
      @index += match_len
    else
      terminal_parse_failure('"("')
      r0 = nil
    end

    node_cache[:begin_slur][start_index] = r0

    r0
  end

  module EndSlur0
    def to_slur_mark; return Musicality::SlurMarks::END_SLUR; end
  end

  def _nt_end_slur
    start_index = index
    if node_cache[:end_slur].has_key?(index)
      cached = node_cache[:end_slur][index]
      if cached
        node_cache[:end_slur][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?(")", false, index))
      r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      r0.extend(EndSlur0)
      @index += match_len
    else
      terminal_parse_failure('")"')
      r0 = nil
    end

    node_cache[:end_slur][start_index] = r0

    r0
  end

end

class SlurMarkParser < Treetop::Runtime::CompiledParser
  include SlurMark
end


end
end