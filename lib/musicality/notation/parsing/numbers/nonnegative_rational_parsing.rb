# Autogenerated from a Treetop grammar. Edits may be lost.


module Musicality
module Parsing

module NonnegativeRational
  include Treetop::Runtime

  def root
    @root ||= :nonnegative_rational
  end

  include NonnegativeInteger

  include PositiveInteger

  module NonnegativeRational0
    def nonnegative_integer
      elements[0]
    end

    def positive_integer
      elements[2]
    end
  end

  module NonnegativeRational1
    def to_r
      text_value.to_r
    end
    
    alias :to_num :to_r
  end

  def _nt_nonnegative_rational
    start_index = index
    if node_cache[:nonnegative_rational].has_key?(index)
      cached = node_cache[:nonnegative_rational][index]
      if cached
        node_cache[:nonnegative_rational][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_nonnegative_integer
    s0 << r1
    if r1
      if (match_len = has_terminal?("/", false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure("/")
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_positive_integer
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NonnegativeRational0)
      r0.extend(NonnegativeRational1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:nonnegative_rational][start_index] = r0

    r0
  end

end

class NonnegativeRationalParser < Treetop::Runtime::CompiledParser
  include NonnegativeRational
end


end
end