# Autogenerated from a Treetop grammar. Edits may be lost.


module Musicality
module Parsing

module Tempo
  include Treetop::Runtime

  def root
    @root ||= :tempo
  end

  include PositiveInteger

  include PositiveFloat

  include PositiveRational

  def _nt_tempo
    start_index = index
    if node_cache[:tempo].has_key?(index)
      cached = node_cache[:tempo][index]
      if cached
        node_cache[:tempo][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_tempo_bpm
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_tempo_qnpm
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_tempo_npm
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_tempo_nps
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:tempo][start_index] = r0

    r0
  end

  module TempoBpm0
    def val
      elements[0]
    end

  end

  module TempoBpm1
    def to_tempo
      Musicality::Tempo::BPM.new(val.to_num)
    end
  end

  def _nt_tempo_bpm
    start_index = index
    if node_cache[:tempo_bpm].has_key?(index)
      cached = node_cache[:tempo_bpm][index]
      if cached
        node_cache[:tempo_bpm][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_positive_number
    s0 << r1
    if r1
      i2 = index
      if (match_len = has_terminal?("bpm", false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure("bpm")
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r2 = r3
      else
        if (match_len = has_terminal?("BPM", false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure("BPM")
          r4 = nil
        end
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TempoBpm0)
      r0.extend(TempoBpm1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tempo_bpm][start_index] = r0

    r0
  end

  module TempoQnpm0
    def val
      elements[0]
    end

  end

  module TempoQnpm1
    def to_tempo
      Musicality::Tempo::QNPM.new(val.to_num)
    end
  end

  def _nt_tempo_qnpm
    start_index = index
    if node_cache[:tempo_qnpm].has_key?(index)
      cached = node_cache[:tempo_qnpm][index]
      if cached
        node_cache[:tempo_qnpm][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_positive_number
    s0 << r1
    if r1
      i2 = index
      if (match_len = has_terminal?("qnpm", false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure("qnpm")
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r2 = r3
      else
        if (match_len = has_terminal?("QNPM", false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure("QNPM")
          r4 = nil
        end
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TempoQnpm0)
      r0.extend(TempoQnpm1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tempo_qnpm][start_index] = r0

    r0
  end

  module TempoNpm0
    def val
      elements[0]
    end

  end

  module TempoNpm1
    def to_tempo
      Musicality::Tempo::NPM.new(val.to_num)
    end
  end

  def _nt_tempo_npm
    start_index = index
    if node_cache[:tempo_npm].has_key?(index)
      cached = node_cache[:tempo_npm][index]
      if cached
        node_cache[:tempo_npm][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_positive_number
    s0 << r1
    if r1
      i2 = index
      if (match_len = has_terminal?("npm", false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure("npm")
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r2 = r3
      else
        if (match_len = has_terminal?("NPM", false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure("NPM")
          r4 = nil
        end
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TempoNpm0)
      r0.extend(TempoNpm1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tempo_npm][start_index] = r0

    r0
  end

  module TempoNps0
    def val
      elements[0]
    end

  end

  module TempoNps1
    def to_tempo
      Musicality::Tempo::NPS.new(val.to_num)
    end
  end

  def _nt_tempo_nps
    start_index = index
    if node_cache[:tempo_nps].has_key?(index)
      cached = node_cache[:tempo_nps][index]
      if cached
        node_cache[:tempo_nps][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_positive_number
    s0 << r1
    if r1
      i2 = index
      if (match_len = has_terminal?("nps", false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure("nps")
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r2 = r3
      else
        if (match_len = has_terminal?("NPS", false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure("NPS")
          r4 = nil
        end
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TempoNps0)
      r0.extend(TempoNps1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tempo_nps][start_index] = r0

    r0
  end

  def _nt_positive_number
    start_index = index
    if node_cache[:positive_number].has_key?(index)
      cached = node_cache[:positive_number][index]
      if cached
        node_cache[:positive_number][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_positive_float
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_positive_rational
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_positive_integer
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:positive_number][start_index] = r0

    r0
  end

end

class TempoParser < Treetop::Runtime::CompiledParser
  include Tempo
end


end
end