#!/usr/bin/env ruby

exe_name = File.basename(__FILE__)

doc = <<DOCOPT
Loads a musicality score from YAML file, and converts it to one or more MIDI 
files. If no part names are given, all score parts are selected for MIDI 
sequencing. Otherwise, only the given parts names will be selected. By default,
a single engraving file will be produced. If the --split flag is used, a file 
will be produced for each part. If --outdir is not given, files will be put in
the same directory as the score file.

Usage:
  #{exe_name} SCORE [PART]... [options]
  #{exe_name} -h | --help
  #{exe_name} --version

Arguments:
  SCORE A musicality score file (may be packed as a hash) in a YAML file
  PART name of a part in the score (e.g. "lhand")

Options:
  --split        Make separate files for each part
  --outdir=OUTD  Dir where files will be put (defaults to same dir as score file)
  --srate=SRATE sampling rate for converting tempo-based score to time-based
                score, and for sampling dynamic change values [default: 200]
  -h --help     Show this screen.
  --version     Show version.
DOCOPT

require 'docopt'
begin
  args = Docopt::docopt(doc)
  puts args
rescue Docopt::Exit => e
  puts e.message
  exit
end

require 'musicality'

if args["--version"]
  puts "#{exe_name} in musicality v#{Musicality::VERSION}"
  exit
end

SCORE_FILE = args["SCORE"]
unless File.exists? SCORE_FILE
  puts "Score file #{SCORE_FILE} does not exist. Aborting."
  exit
end

if args["--outdir"]
  OUTDIR = args["--outdir"]
  unless Dir.exists? OUTDIR
    puts "Output directory #{OUTDIR} does not exist. Aborting."
    exit
  end
else
  OUTDIR = File.dirname(SCORE_FILE)
end

PARTS = args["PART"]
SPLIT = args["--split"]

require 'yaml'
include Musicality

File.open(SCORE_FILE) do |fin|
  print "Reading file '#{SCORE_FILE}'..."
  score = YAML.load(fin.read)
  
  if score.is_a? Hash
    score = score.unpack
  end
  puts "done"
  
  unless score.is_a? Score::Timed
    print "Converting to timed score..."
    score = score.to_timed(args["--srate"].to_i)
    puts "done"
  end
  
  if score.valid?
    if PARTS.any?
      selected_parts = PARTS
    else
      selected_parts = score.parts.keys
    end

    print "Making MIDI sequence..."
    sequencer = ScoreSequencer.new(score)
    outfiles = {}

    if SPLIT
      selected_parts.each do |selected_part|
        outfiles[selected_part] = sequencer.make_midi_seq([selected_part])
      end
    else
      outfiles[""] = sequencer.make_midi_seq(selected_parts)
    end
    puts "done"  

    # part_names = args["PART"]
    # program_nums = args["PROGRAM"].map {|str| str.to_i }
    # instr_map = Hash[[part_names,program_nums].transpose]    

    base_fout_name = "#{OUTDIR}/#{File.basename(SCORE_FILE,File.extname(SCORE_FILE))}"  
    outfiles.each do |outfile, seq|
      if outfile.empty?
        fout_name = "#{base_fout_name}.mid"
      else
        fout_name = "#{base_fout_name}_#{outfile}.mid"
      end
      print "Writing MIDI file '#{fout_name}'..."
      File.open(fout_name, 'wb'){ |fout| seq.write(fout) }
      puts "done"
    end
  else
    puts "Score is not valid. See errors:"
    puts score.errors.join("\n")
  end
end
